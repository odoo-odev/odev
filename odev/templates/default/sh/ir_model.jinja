{% import "utils_makro.jinja" as makro -%}
from odoo import models, fields, api, _
{% if data['constraints'] | length -%}
#from odoo.exceptions import ValidationError
{%- endif -%}
{%- for lib in data.import %}
{{lib}}
{%endfor%}

{% if data.comment %}
{{makro.comment(data.create_uid, data.create_date, data.write_uid, data.write_date)}}
{%- endif %}
class {{data.model | odoo_field | replace("."," ") | replace("_", " ") | title | replace(" ","") }}({%-if data.transient -%}models.TransientModel{%-else-%}models.Model{%-endif-%}):
    {%- if data.info and ("Model super-class for" not in data.info and "Main super-class for" not in data.info and "Generic message composition wizard" not in data.info) %}
    """{{data.info | trim}}"""
    {%- endif %}
    {%- set inherit = [] %}
    {%- if data.state == "manual" %}
    _name = "{{data.model | lower | odoo_model}}"
    {%- else -%}
        {{inherit.append('"' + data.model | lower | odoo_model + '"') or ""}}
    {%- endif -%}
    {%- if data.integration -%}
        {{inherit.append('"edi.integration"') or ""}}
    {%- endif -%}
    {%- if data.state != "base" and data.is_mail_thread -%}
        {{inherit.append('"mail.thread"') or ""}}
    {%- endif -%}
    {%- if data.state != "base" and data.is_mail_activity -%}
        {{inherit.append('"mail.activity.mixin"') or ""}}
    {%- endif -%}
    {%- if inherit %}
    _inherit = {% if inherit | length == 1 -%}{{inherit[0]}}{%- else -%}[{{inherit|join(', ')}}]{%- endif -%}
    {%- endif -%}
    {%- if data.name and data.state == "manual" %}
    _description = "{{data.name}}"
    {%- endif %}

{% for field in data['ir.model.fields'] %}
    {%-if field.name not in ('write_uid', 'write_date', 'create_uid', 'create_date', '__last_update', 'display_name', 'id')%}
    {%- if loop.previtem and loop.previtem.ttype != field.ttype %}
{% endif %}
    {%- if field.description %}

    # Description : {{field.description | replace('\n', '\n# ') | indent(4, False) }}
    {%- endif %}
    {{field.name | lower | odoo_field}} = fields.{{field.ttype|capitalize}}(
        {%- set field_param = [] -%}
        {%-if field.field_description -%}{{field_param.append('string="'+field.field_description+'"') or ""}}{%- endif -%}

        {%- if field.ttype in ('one2many', 'many2many', 'many2one') and field.relation != "" -%}
            {{field_param.append("comodel_name='"+field.relation | lower | odoo_model +"'") or ""}}
        {%-endif-%}

        {%-if field.ttype == 'many2many'-%}
            {%- if field.relation_table -%}
                {{field_param.append("relation='"+field.relation_table | lower | odoo_field + "'") or ""}}
            {%- endif -%}
            {%-if field.column1 -%}
                {{field_param.append("column1='"+field.column1 | odoo_field + "'") or ""}}
            {%-endif-%}
            {%-if field.column2 -%}
                {{field_param.append("column2='"+field.column2 | odoo_field + "'") or ""}}
            {%-endif-%}
        {%-endif-%}

        {%-if field.ttype == 'one2many'-%}
            {%- if field.relation_field -%}
                {{field_param.append("inverse_name='"+field.relation_field | lower | odoo_field+"'") or ""}}
            {%-endif-%}
        {%-endif-%}

        {%-if field.ttype == 'selection'-%}
            {%- set key = "selection_add" if field.selection_add else "selection" -%}
            {%- set selection = field.selection_add if field.selection_add else field.selection -%}
            {{field_param.append(key+"="+selection | string) or ""}}
        {%-endif-%}

        {%-if field.compute -%}
            {{field_param.append('compute="_compute_'+field.name | lower | odoo_field+'"') or ""}}
        {%- endif-%}

        {%-if field.default_value -%}
            {%- if (field.default_value | lower) in ['true', 'false'] or field.default_value.isdigit() or field.default_value.startswith('lambda ') or ( field.default_value.startswith('[') and field.default_value.endswith(']') )%}
                {{field_param.append("default="+field.default_value) or ""}}
            {%- else -%}
                {{field_param.append("default='"+field.default_value + "'") or ""}}
            {%-endif-%}
        {%-endif-%}

        {%-if field.domain is defined and field.domain != "[]" and field.domain != "" -%}
            {{field_param.append("domain="+field.domain | replace('"', "'")) or ""}}
        {%-endif-%}

        {%-for key,attr,type in [('store', 'store', 'bool'), ('required', 'required', 'bool'), ('track_visibility', 'track_visibility', 'bool'), ('copied', 'copy', 'bool'), ('help', 'help', 'str'), ('translate', 'translate', 'bool'), ('index', 'index', 'bool')] -%}
            {%-if field[key]-%}
                {%-if type == 'str'-%}
                    {%-if '"' in field[key]-%}
                        {{field_param.append(attr+"='"+field[key] | replace('\n','\\n')+"'") or ""}}
                    {%-else-%}
                        {{field_param.append(attr+'="'+field[key] | replace('\n','\\n')+'"') or ""}}
                    {%-endif-%}
                {%-else-%}
                    {%- if key != 'store' or (field['store'] == False or (field.compute != False and field['store'] == True)) -%}
                        {{field_param.append(attr+"="+field[key]|string) or ""}}
                    {%-endif-%}
                {%-endif-%}
            {%-endif-%}
        {%-endfor-%}

        {%-if field.related -%}
            {{field_param.append("related='"+field.related | lower | odoo_field+"'") or ""}}
        {%-endif-%}

        {%-if field.ondelete -%}
            {%- if field.ondelete is string -%}
                {{field_param.append("ondelete="+field.ondelete) or ""}}
            {%- else -%}
                {{field_param.append("ondelete="+field.ondelete | string) or ""}}
            {%- endif -%}
        {%-endif-%}
        {{ field_param|join(', ') }})
    {%-endif-%}
{%- endfor %}

{%- for constraint in data['constraints'] -%}

{% set name =  (constraint["name"]  | odoo_field) %}
{% set field = name %}
{% set method = name %}
{% set sql = name %}
{%- if not constraint["name"].startswith('_') -%}
{% set method =  "_check_" ~ constraint["name"] %}
{%-else-%}
{% set sql = name ~ "_unique" %}
{%-endif%}
{%- if not constraint["name"].startswith('_') -%}
{{makro.todo(data.export_type, "py", 'Choose between sql or python constraint') | indent(4, True)}}
    # _sql_constraints = [
    #     (
    #         '{{name | odoo_field}}_unique',
    #         'unique({{name | odoo_field}})',
    #         '{{constraint["constraint"] | replace("'", "\\'")}}',
    #     ),
    #]
    #
    # Or
    #
{%- endif %}
    # @api.constrains('{{field | odoo_field}}')
    # def {{method}}(self):
    #     for rec in self:
    #         if True:
    #             raise ValidationError(_('{{constraint["constraint"] | replace("'", "\\'")}}'))

{%-endfor -%}

{% for method in data['method'] %}

    def {{method.name}}(self):
        # Description : {{method.description | wordwrap(80) | replace('\n', '\n# ') | indent(8, False) }}
        {{makro.todo(data.export_type, "py", 'Replace the "return" statement (present only to prevent errors) with your code') | indent(4, True)}}
        {%- if method.action == "override" %}
        res = super().{{method.name}}()
        return res
        {%- else %}
        return False
        {%- endif %}
{%-endfor-%}

{%- for field in data['ir.model.fields'] -%}
    {%- if field.compute %}

{% if field.depends is sameas true %}
    @api.depends('')
    {%- elif field.depends -%}
    {%- set depends = field.depends.split(",") %}
    @api.depends({%- for depend in depends -%}'{{depend | odoo_field}}'{%- if not loop.last -%}, {%endif-%}{%-endfor-%})
    {%-endif %}
    def _compute_{{field.name | lower | odoo_field}}(self):
    {%- if data.export_type == "scaffold" %}
        {%- if field.compute is sameas true -%}
            {%- set comment = "None\n" %}
        {%- else -%}
            {%- set comment = "None\n" + field.compute | trim | trim('\t') %}
        {%- endif %}
        for rec in self:
            rec.{{field.name | lower | odoo_field }} = {{comment | wordwrap(100) | replace('\n', '\n# ') | indent(8,False)}}
    {%-else%}
{{field.compute | trim | replace("\t", "    ") | indent(8, True) | odoo_field}}
    {%-endif%}

    {%- endif -%}
{%-endfor-%}

{%- for ias in data['ir.actions.server'] %}
    {%- if ias.code %}

{% if data.comment %}
    # {{ias.name}}
    # {{ias.xml_id}}
{% endif %}
    def _action_server_{{ias.xml_name | odoo_field | lower | replace(".","_") | replace("-","_")}}(self):
{{ias.code | trim | replace("\t", "    ")  | indent(8, True) | odoo_field | odoo_server_action }}
    {%- endif -%}
{%-endfor-%}

{%- if 'integration' in data -%}
{%- for type, integrations in data['integration'].items() -%}
    {%- set integrations_list = integrations | map(attribute="name") | list -%}
    {%- if type == "out" -%}
        {%- set method_name = "_process_record_out"  -%}
        {%- set method_args = "records, raise_error=False"  -%}
        {%- set return = "# Generate a string containing %s data\nreturn ''" -%}
    {%- else -%}
        {%- set method_name = "_process_content"  -%}
        {%- set method_args = "filename, content"  -%}
        {%- set return = " # Process the content\nreturn 'done'" -%}
    {%- endif %}

    def {{method_name}}(self, {{method_args}}):

        if self.type not in ["{{integrations_list | join('"," ')}}"]:
            return super().{{method_name}}({{method_args | replace('=False', '')}})

        {%- for integration in integrations %}

        # Description : {{integration.process | wordwrap(80) | replace('\n', '\n# ') | indent(8, False) }}
        if self.type == '{{integration.name}}':
            {{return | replace('%s', integration.format) | indent(12, False)}}
        {%-endfor-%}
{%-endfor-%}
{%- endif -%}
